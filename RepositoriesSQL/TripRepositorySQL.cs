using Microsoft.Data.SqlClient;
using RegionSyd.Models;
using System;
using System.Collections.Generic;

namespace RegionSyd.RepositoriesSQL
{
    public class TripRepositorySQL
    {
        private readonly string _connectionString;

        public TripRepositorySQL(string connectionString =
            "Data Source=(localdb)\\GustavDB;Initial Catalog=RegionSyd;Integrated Security=True;Connect Timeout=30;Encrypt=False;Trust Server Certificate=False;Application Intent=ReadWrite;Multi Subnet Failover=False"
            )
        {
            _connectionString = connectionString;
        }

        // Save a new trip to the database
        public void SaveTrip(Trip trip)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                string query = @"
                    INSERT INTO Trip (AmbulanceId, TaskId, PickUpRegionId, DropOffRegionId) 
                    VALUES (@AmbulanceId, @TaskId, @PickUpRegionId, @DropOffRegionId)";

                using (var command = new SqlCommand(query, connection))
                {
                    
                    command.Parameters.AddWithValue("@AmbulanceId", trip.AmbulanceId);
                    command.Parameters.AddWithValue("@TaskId", trip.TaskId);
                    command.Parameters.AddWithValue("@PickUpRegionId", trip.PickUpRegionId);
                    command.Parameters.AddWithValue("@DropOffRegionId", trip.DropOffRegionId);
                    command.ExecuteNonQuery();
                    // Get the new TripId generated by the database
                    // trip.TripId = (int)command.ExecuteScalar();
                }
            }
        }

        // Remove a trip from the database
        public void RemoveTrip(int tripId)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                string query = "DELETE FROM Trip WHERE TripId = @TripId";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@TripId", tripId);
                    command.ExecuteNonQuery();
                }
            }
        }

        // Load all trips from the database
        public List<Trip> LoadTrips()
        {
            var trips = new List<Trip>();

            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                string query = "SELECT TripId, AmbulanceId, TaskId, PickUpRegionId, DropOffRegionId FROM Trip";
                using (var command = new SqlCommand(query, connection))
                {
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            trips.Add(new Trip
                            (
                                reader.GetInt32(0),
                                reader.GetInt32(1),
                                reader.GetInt32(2),
                                reader.GetInt32(3),
                                reader.GetInt32(4)
                            ));
                        }
                    }
                }
            }

            return trips;
        }
    }
}
